# -*- coding: utf-8 -*-
"""medical cost_predictive analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11OMnnY92GJotmrEwFulEpHJwoZG57ULH

# Business Understanding

Suatu perusahaan asuransi kesehatan memiliki tanggung jawab yang besar terhadap perjanjian medis yang dilakukan dengan individu/kelompok. Perusahaan akan mengalami kerugian signifikan jika salah menentukan premi asuransi. Misalnya premi yang terlalu rendah akan menyebabkan kerugian finansial saat klaim melonjak, sedangkan premi yang terlalu tinggi menyebabkan kehilangan pelanggan akibat nilai yang tidak kompetitif. Selain itu, perusahaan asuransi tersebut juga tidak dapat mengidentifikasi pasien dengan resiko tinggi yang berkemungkinan dapat ditawarkan program kesehatan khusus.

Oleh karena itu, penting bagi perusahaan asuransi kesehatan untuk mengetahui dan dapat memprediksi kejadian di masa depan dengan menggunakan suatu sistem. Hal ini akan berdampak positif pada penyusunan anggaran, perencanaan risiko, dan penyesuaian strategi akan mengandalkan teknologi atau automation judgement, yang mana dapat membantu pengambilan keputusan dan prosesnya tidak memakan waktu lama.

**Problem Statements**
- Dari serangkaian atribut(fitur) yang ada, atribut(fitur) apa yang paling berpengaruh terhadap biaya medis (charge) asuransi?
- Bagaimana cara memprediksi biaya medis (charges) yang akan dikeluarkan seseorang berdasarkan fitur yang ada?

**Goals**
- Mengetahui atribut(fitur) yang paling berkorelasi dengan biaya medis (charges)
- Membuat machine learning yang dapat memprediksi biaya medis (charges) berdasarkan fitur yang ada

**Solution statements**
- Membangun model baseline menggunakan Linear Regression.
- Membangun model alternatif menggunakan Random Forest dan Gradient Boost.
- Mengukur performa model menggunakan MAE, MSE, dan R2 Score.
- Memilih model terbaik berdasarkan nilai MAE dan MSE terendah serta R2 Score tertinggi

# Data Understanding

Dataset yang digunakan merupakan dataset publik yang banyak digunakan dalam pembelajaran machine learning, terutama untuk studi kasus regresi yaitu Medical Cost Personal Dataset yang diperoleh dari Kaggle. Dataset memiliki jumlah sampel 1.338 baris. Terdapat beberapa fitur non-numerik seperti "sex", "smoker", "region". Beberapa fitur numerik seperti "age", "bmi", "children", "charges". Berdasarkan struktur penamaan wilayah (southeast, southwest, northeast, northwest) serta tingginya nilai biaya medis (charges), dataset ini sangat besar kemungkinan berasal dari konteks layanan kesehatan di Amerika Serikat.

**Variabel-variabel pada Medical Cost Personal dataset adalah sebagai berikut:**
- Age: usia pelanggan/pasien
- Sex: jenis kelamin pelanggan/pasien
- Bmi: indeks masa tubuh pelanggan/pasien
- Children: tanggungan anak pelanggan/pasien
- Smoker: status perokok pelanggan/pasien
- Region: wilayah tempat tinggal pelanggan/pasien
- Charges: biaya medis pelanggan/pasien

Link dataset: https://www.kaggle.com/datasets/mirichoi0218/insurance?resource=download

## Import Library
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

"""## Data Loading"""

df = pd.read_csv("/content/insurance.csv")
df

"""- Terdapat 1.338 baris dalam dataset
- Terdapat 7 kolom yaitu: age, sex, bmi, children, smoker, region, charges

## Exploratory Data Analysis
"""

# Deskripsi fitur
df.info()

"""- Terdapat 3 kolom bertipe object yaitu sex, smoker, region. Kolom ini termasuk kolom non-numerik
- Terdapat 2 kolom bertipe integer yaitu age dan children
- Terdapat 2 kolom bertipe float yaitu bmi dan charges
"""

# Deskripsi statistik
df.describe()

"""Deskripsi statistik di atas dinilai normal, tidak terdapat indikasi atau logika yang tidak masuk akal"""

# Mengecek duplikasi data
print("Jumlah duplikasi: ", df.duplicated().sum())

# Drop duplikasi data
df.drop_duplicates(inplace=True)
df.shape

"""Terdapat indikasi duplikasi data berjumlah 1 sehingga perlu untuk meghapus baris data tersebut. Jumlah baris sekarang menjadi 1.337 baris"""

# Mengecek missing value
df.isna().sum()

"""Tidak terdapat nilai yang hilang pada dataset di setiap baris dan kolomnya"""

# Mendeteksi outlier

# Fitur age
sns.boxplot(x=df["age"])

# Fitur bmi
sns.boxplot(x=df["bmi"])

# Fitur charges
sns.boxplot(x=df["charges"])

"""Terdapat outlier pada fitur bmi dan biaya medis (charges). Tetapi hal ini dianggap normal, sebab nilai BMI masih masuk akal direntang 10-60. Kemudian nilai charges dibiarkan, sebab kita menginginkan model memprediksi nilai ekstrem, sebagai bahan prediksi perusahaan asuransi dengan berbagai faktor yang ada

### Univariate Analysis

Melakukan analisis terhadap masing-masing fitur (univariate)
"""

# Membuat variabel berdasarkan jenis fitur
categorical_features = ["sex", "smoker", "region"]
numerical_features = ["age", "bmi", "children", "charges"]

"""Categorical Features"""

# Fitur sex
feature = categorical_features[0]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_sex = pd.DataFrame({"Jumlah sampel":count, "Persentase":percent.round(1)})
print(df_sex)
count.plot(kind='bar', title=feature)

"""Dari data persentase di atas dapat disimpulkan bahwa jenis kelamin laki-laki dan perempuan pada dataset hampir seimbang di angka 50.5% (675 sampel) dan 49.5% (662 sampel)"""

# Fitur smoker
feature = categorical_features[1]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_smoker = pd.DataFrame({"Jumlah sampel":count, "Persentase":percent.round(1)})
print(df_smoker)
count.plot(kind='bar', title=feature)

"""Dari data persentase di atas dapat disimpulkan bahwa 20% pelanggan/pasien merupakan perokok. Selebihnya merupakan status perokok tidak aktif. Hal ini menandakan bahwa lebih dari setengah pelanggan/pasien dari perusahaan asuransi bukan perokok"""

# Fitur region
feature = categorical_features[2]
count = df[feature].value_counts()
percent = 100*df[feature].value_counts(normalize=True)
df_region = pd.DataFrame({"Jumlah sampel":count, "Persentase":percent.round(1)})
print(df_region)
count.plot(kind='bar', title=feature)

"""Dari data persentase di atas dapat disimpulkan bahwa pelanggan/pasien terbanyak berasal dari region southeast dengan 27.2%, selebihnya sama rata berasal dari region lain (southwest, northwest, northeast)

Numerical Features
"""

df.hist(bins=50, figsize=(10,10))
plt.show()

"""Berdasarkan histogram ini dapat kita simpulkan sebagai berikut.
- Rentang usia terbilang cukup luas, dengan konsentrasi yang lebih tinggi pada usia muda
- Distribusi BMI cenderung mengikuti pola normal dengan sebagian besar nilai berada di rentang yang umum
- Sebagian besar pelanggan/pasien tidak memiliki anak
- Biaya medis yang dikenakan sangat bervariasi, dengan sebagian besar berada di tingkat yang lebih rendah dan sebagian kecil dengan biaya yang jauh lebih tinggi.

Berikut adalah kategori BMI berdasarkan rentang nilai:
- < 18.5: Kekurangan Berat Badan (Underweight)
- 18.5 - 24.9: Berat Badan Normal (Normal weight)
- 25.0 - 29.9: Kelebihan Berat Badan (Overweight)
- 30.0 - 34.9: Obesitas Tingkat 1 (Obesity Class I)
- 35.0 - 39.9: Obesitas Tingkat 2 (Obesity Class II)
- Lebih dari 40.0: Obesitas Tingkat 3 (Obesity Class III)

### Multivariate Analysis

Melakukan analisis menilai relasi antar fitur terhadap fitur target (charges)

Categorical Features
"""

# Melihat rata-rata biaya medis (charges) terhadap fitur kategori
for column in categorical_features:
  sns.catplot(x=column, y="charges", kind="bar", dodge=False, height=3, aspect=2, data=df, palette="Set2")
  plt.title("Rata-rata Biaya Medis (Charges) Relatif terhadap - {}".format(column))

"""Dengan mengamati rata-rata biaya medis (charges) relatif terhadap fitur kategori di atas, kita memperoleh insight sebagai berikut:
- Pada fitur sex, rata-rata biaya medis untuk laki-laki cenderung lebih tinggi dibandingkan dengan rata-rata biaya medis untuk perempuan. Meskipun dengan adanya perbedaan rata-rata biaya medis antara laki-laki dan perempuan, fitur sex memiliki pengaruh atau dampak yang kecil terhadap rata-rata biaya medis. Gender bukan menjadi patokan untuk biaya medis yang tinggi.
- Pada fitur smoker, kebiasaan merokok memiliki pengaruh yang sangat besar terhadap rata-rata biaya medis. Secara spesifik, rata-rata biaya medis untuk perokok jauh lebih tinggi dibandingkan dengan rata-rata biaya medis untuk bukan perokok. Sehingga fitur smoker, memiliki pengaruh atau dampak yang besar terhadap rata-rata biaya medis.
- Pada fitur region, perbedaan rata-rata biaya medis antar wilayah memang ada, tetapi perbedaannya relatif lebih kecil. Sehingga fitur region memiliki pengaruh atau dampak yang kecil terhadap rata-rata biaya medis.

Numeric Features
"""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(df, diag_kind = 'kde')

plt.figure(figsize=(10, 8))
correlation_matrix = df[numerical_features].corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Jika kita amati, fitur age (0.30) dan bmi (0.20) memiliki skor korelasi yang terindikasi positif dengan fitur target charges. Artinya, fitur charges berkorelasi dengan dua fitur tersebut. Sementara itu, fitur children memiliki korelasi yang sangat kecil (0.07). Sehingga, fitur tersebut dapat di-drop."""

df.drop(["children"], inplace=True, axis=1)
df.head()

"""# Data Preparation

Encoding Fitur Kategori

Encoding fitur kategori menggunakan OneHotEncoding dan LabelEncoder. Hal ini dilakukan sebab model regresi membutuhkan input numerik, maka dari itu fitur kategori yang bertipe object di rubah menjadi numerik agar model mengenali data kategorikal
"""

label_encoder = LabelEncoder()
df["sex"] = label_encoder.fit_transform(df["sex"])
df["smoker"] = label_encoder.fit_transform(df["smoker"])
df = pd.get_dummies(df, columns=["region"], dtype=int)
df.head()

"""Train Test Split

Membagi dataset menjadi data train dan data test dengan perbandingan 80:20, sebab data yang kita miliki berada di kisaran 1000an sampel sehingga ini menjadi ideal. Hal ini dilakukan guna melakukan tahap training pada model menggunakan data train, lalu melakukan tahap evaluasi menggunakan data test
"""

X = df.drop(["charges"], axis=1)
y = df["charges"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f'Total sampel dataset keseluruhan: {len(X)}')
print(f'Total sampel dataset latihan (train): {len(X_train)}')
print(f'Total sampel dataset uji (test): {len(X_test)}')

"""Standarisasi

Standarisasi (scaling) menggunakan StandardScaler terhadap data yang telah displit sebelumnya. StandardScaler menghasilkan distribusi angka rentang 1,0,-1. Hal ini dilakukan agar algoritma stidak terpengaruh oleh perbedaan skala antar fitur.
"""

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

"""# Modeling

Pada tahap ini, kita akan mengembangkan model machine learning dengan tiga algoritma. Kemudian, kita akan mengevaluasi performa masing-masing algoritma dan menentukan algoritma mana yang memberikan hasil prediksi terbaik. Ketiga algoritma yang akan kita gunakan, antara lain:

1. Linear Regression
2. Random Forest
3. Gradient Boost

Linear Regression
"""

# Definisikan model
LR = LinearRegression()

# Latih model
LR.fit(X_train, y_train)

# Prediksi dengan model
pred_LR = LR.predict(X_test)

# Hitung metrik evaluasi
mae_LR = mean_absolute_error(y_test, pred_LR)
mse_LR = mean_squared_error(y_test, pred_LR)
r2_LR = r2_score(y_test, pred_LR)

print(f"MAE: {mae_LR}")
print(f"MSE: {mse_LR}")
print(f"R²: {r2_LR}")

"""Random Forest Regressor"""

# Definisikan model
RF = RandomForestRegressor(n_estimators=150, max_depth=15, random_state=123, n_jobs=-1)

# Latih model
RF.fit(X_train, y_train)

# Prediksi dengan model
pred_RF = RF.predict(X_test)

# Hitung metrik evaluasi
mae_RF = mean_absolute_error(y_test, pred_RF)
mse_RF = mean_squared_error(y_test, pred_RF)
r2_RF = r2_score(y_test, pred_RF)

print(f"MAE: {mae_RF}")
print(f"MSE: {mse_RF}")
print(f"R²: {r2_RF}")

"""Gradient Boosting"""

# Definisikan model
GB = GradientBoostingRegressor(n_estimators=150, max_depth=3, learning_rate=0.05, random_state=42)

# Latih model
GB.fit(X_train, y_train)

# Prediksi dengan model
pred_GB = GB.predict(X_test)

# Hitung metrik evaluasi
mae_GB = mean_absolute_error(y_test, pred_GB)
mse_GB = mean_squared_error(y_test, pred_GB)
r2_GB = r2_score(y_test, pred_GB)

print(f"MAE: {mae_GB}")
print(f"MSE: {mse_GB}")
print(f"R²: {r2_GB}")

"""# Evaluasi Model

Setiap model dilatih dan diuji menggunakan data yang sudah disiapkan. Model dievaluasi dengan metrik berikut:
- MAE (Mean Absolute Error)
- MSE (Mean Squared Error)
- R2 Score (Koefisien Determinasi)
"""

# Membuat dictionary untuk menyimpan hasil evaluasi
data = {
    'MAE': [mae_LR, mae_RF, mae_GB],
    'MSE': [mse_LR, mse_RF, mse_GB],
    'R²': [r2_LR, r2_RF, r2_GB]
}

# Konversi dictionary menjadi DataFrame
df_results = pd.DataFrame(data, index=["Linear Regression", "Random Forest", "Gradient Boosting"])
df_results.round(2)

fig, axes = plt.subplots(1, 3, figsize=(18,5))
colors = ['skyblue', 'orange', 'lightgreen']

# MAE
df_results['MAE'].plot(kind='bar', ax=axes[0], color=colors)
axes[0].set_title('Mean Absolute Error (MAE)')
axes[0].set_ylabel('MAE')
axes[0].tick_params(axis='x', rotation=45)

# MSE
df_results['MSE'].plot(kind='bar', ax=axes[1], color=colors)
axes[1].set_title('Mean Squared Error (MSE)')
axes[1].set_ylabel('MSE')
axes[1].tick_params(axis='x', rotation=45)

# R²
df_results['R²'].plot(kind='bar', ax=axes[2], color=colors)
axes[2].set_title('R-squared (R²)')
axes[2].set_ylabel('R²')
axes[2].tick_params(axis='x', rotation=45)

plt.tight_layout()
plt.show()

"""Dari hasil tersebut, dapat disimpulkan bahwa Gradient Boosting Regressor menunjukkan performa terbaik karena memiliki:

- Nilai MAE paling rendah, artinya rata-rata kesalahan prediksinya paling kecil
- Nilai MSE paling rendah, menunjukkan prediksi model relatif konsisten dan tidak terlalu jauh dari nilai aktual
- Nilai R² tertinggi (0.90), yang berarti model mampu menjelaskan 90% variasi dari target

Model ini dapat digunakan perusahaan asuransi untuk memprediksi kebutuhan perusahaan di masa depan
"""